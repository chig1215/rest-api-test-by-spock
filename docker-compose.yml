version: "3.7"
services:
  dbserver:
    container_name: mysql-db  # コンテナ名（Docker Desktop上はこの名前で表示される）
    build:
      context: ./docker/mysql # Dockerfileを含むディレクトリへのパス
      dockerfile: Dockerfile  # Dockerfile名
    image: chig1215/mysql:5.7 # イメージ名
    environment:
      MYSQL_ROOT_PASSWORD: root # 環境変数（rootユーザのパスワード）
      MYSQL_USER: chig1215      # 環境変数（ユーザ）
      MYSQL_PASSWORD: chig1215  # 環境変数（パスワード）
      MYSQL_DATABASE: kinto     # 環境変数（データベース名）
    restart: always # 再起動ポリシー
    command: --default-authentication-plugin=mysql_native_password  # mysql_native_password を使用したネイティブ認証
    ports:
      - "3306:3306" # ポートマッピング
    volumes:
      - ./docker/mysql/conf.d:/etc/mysql/conf.d # mysql.confディレクトリのマッピング
      - ./docker/log/mysql:/var/log/mysql       # mysqld.logディレクトリのマッピング
      - mysql_db:/var/lib/mysql                 # データ永続化ボリュームのマッピング
  flyway-repair:
    container_name: flyway-repair # コンテナ名（Docker Desktop上はこの名前で表示される）
    image: flyway/flyway          # イメージ名
    command: repair               # 前回のSQLエラー解消（サンプルコンテンツのため。本番稼働アプリでは不要）
    volumes:
      - ./docker/flyway/conf:/flyway/conf # flyway.confディレクトリのマッピング
    depends_on:
      - dbserver  # MySQLコンテナが起動した後に起動させる
  flyway-migration:
    container_name: flyway-migration  # コンテナ名（Docker Desktop上はこの名前で表示される）
    image: flyway/flyway              # イメージ名
    # MySQLの接続先を指定してマイグレーションを実行する（host:port部分はコンテナ名を指定する）
    command: -url=jdbc:mysql://dbserver -schemas=kinto -user=chig1215 -password=chig1215 -connectRetries=60 migrate
    volumes:
      - ./docker/flyway/conf:/flyway/conf # flyway.confディレクトリのマッピング
      - ./docker/flyway/sql:/flyway/sql   # マイグレーションSQLファイルディレクトリのマッピング
    depends_on:
      - flyway-repair # repairが完了した後に起動させる
  spring:
    container_name: spring-app  # コンテナ名（Docker Desktop上はこの名前で表示される）
    build: ./docker/spring      # Dockerfileを含むディレクトリへのパス
    depends_on:
      - flyway-migration        # マイグレーションが完了した後に起動させる
    ports:
      - "8080:8080"             # ポートマッピング
    volumes:
      - .:/app                  # ボリュームマッピング
    environment:
      # MySQLの接続設定
      spring.datasource.driverClassName: "com.mysql.cj.jdbc.Driver"
      spring.datasource.url: "jdbc:mysql://dbserver/kinto"  # host:port部分はコンテナ名を指定する
      spring.datasource.username: "chig1215"
      spring.datasource.password: "chig1215"
    working_dir: /app # 作業ディレクトリ
    # jarから起動
    command: sh -c "java -jar ./build/libs/rest-api-test-by-spock-0.0.1-SNAPSHOT.jar"
# DBの永続化先
volumes:
  mysql_db:
    driver: local
